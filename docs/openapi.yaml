openapi: 3.1.0
info:
  title: LetsCould API
  description: |
    The LetsCould API allows you to manage your cloud resources programmatically.
    All requests must be made over HTTPS for encryption and security.
    
    ## Authentication
    All API requests require authentication using an API token in the request headers.
    
    ## Response Format
    All API responses are returned in JSON format with two main properties: `success` and either `data` or `message`.
    
    ## Rate Limits
    - **Hourly limit**: 5,000 requests per hour
    - **Daily limit**: 120,000 requests per day per API token
  version: 1.0.0
  contact:
    name: LetsCould Support
    url: https://letscloud.io/support

servers:
  - url: https://api.letscloud.io
    description: Production API server

paths:
  /instances/{identifier}/shutdown:
    post:
      summary: Shutdown instance
      description: Shutdown a running instance
      operationId: shutdownInstance
      tags:
        - Instances
      parameters:
        - name: identifier
          in: path
          required: true
          description: The identifier of the instance
          schema:
            type: string
          example: "your-identifier-here"
      responses:
        '200':
          description: Instance shutdown successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Instance shutdown successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /instances/{identifier}/change-plan:
    post:
      summary: Change instance plan
      description: Change the plan of an existing instance
      operationId: changeInstancePlan
      tags:
        - Instances
      parameters:
        - name: identifier
          in: path
          required: true
          description: The identifier of the instance
          schema:
            type: string
          example: "Mq5VF63YAdCqXt4U"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - _method
                - plan_slug
              properties:
                _method:
                  type: string
                  example: "PUT"
                plan_slug:
                  type: string
                  example: "1vcpu-2gb-20ssd"
      responses:
        '200':
          description: Instance plan changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Instance plan changed successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /snapshots/status/{image_slug}:
    get:
      summary: Get snapshot status
      description: Get the current build status of a snapshot. To find out the slug, you can List All Snapshots.
      operationId: getSnapshotStatus
      tags:
        - Snapshots
      parameters:
        - name: image_slug
          in: path
          required: true
          description: The slug of the snapshot
          schema:
            type: string
          example: "your-image-slug-here"
      responses:
        '200':
          description: Snapshot status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /snapshots/{image_slug}:
    post:
      summary: Update snapshot label
      description: Update the label of an existing snapshot
      operationId: updateSnapshotLabel
      tags:
        - Snapshots
      parameters:
        - name: image_slug
          in: path
          required: true
          description: The slug of the snapshot
          schema:
            type: string
          example: "your-snapshot-slug"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - _method
                - label
              properties:
                _method:
                  type: string
                  example: "PUT"
                label:
                  type: string
                  example: "Your new label"
      responses:
        '200':
          description: Snapshot label updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Snapshot successfully updated"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    
    delete:
      summary: Delete snapshot
      description: Delete a snapshot from your account. To find out the slug, you can List All Snapshots.
      operationId: deleteSnapshot
      tags:
        - Snapshots
      parameters:
        - name: image_slug
          in: path
          required: true
          description: The slug of the snapshot
          schema:
            type: string
          example: "your-snapshot-slug"
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - _method
              properties:
                _method:
                  type: string
                  example: "DELETE"
      responses:
        '200':
          description: Snapshot deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Snapshot successfully deleted!"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /sshkeys:
    post:
      summary: Store or generate SSH key
      description: Store your current SSH key or generate a new one. If you want to update or recreate a new SSH key, use the same title that will be updating the key. After creating a new key, save the private key as it will not be stored and cannot be retrieved later.
      operationId: storeOrGenerateSSHKey
      tags:
        - SSH Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  example: "My Project 1"
                key:
                  type: string
                  example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDR1FmANsdfdsMmMSKMSDMKDMSKDMSIODM=="
      responses:
        '200':
          description: SSH key stored or generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/SSHKeyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
    
    delete:
      summary: Delete SSH key by slug
      description: Delete an SSH key from your account using its slug
      operationId: deleteSSHKeyBySlug
      tags:
        - SSH Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - slug
                - _method
              properties:
                slug:
                  type: string
                  example: "my-project-1"
                _method:
                  type: string
                  example: "DELETE"
      responses:
        '200':
          description: SSH key deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "SSH Key was successfully deleted!"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /plans:
    get:
      summary: List all plans
      description: Retrieve a list of all available server plans
      operationId: listPlans
      tags:
        - Resources
      responses:
        '200':
          description: List of plans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      plans:
                        type: array
                        items:
                          $ref: '#/components/schemas/Plan'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /images:
    get:
      summary: List all images
      description: Retrieve a list of all available OS images
      operationId: listImages
      tags:
        - Resources
      responses:
        '200':
          description: List of images retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      images:
                        type: array
                        items:
                          $ref: '#/components/schemas/Image'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /locations:
    get:
      summary: List all locations
      description: Retrieve a list of all available server locations
      operationId: listLocations
      tags:
        - Resources
      responses:
        '200':
          description: List of locations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: object
                    properties:
                      locations:
                        type: array
                        items:
                          $ref: '#/components/schemas/Location'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /locations/{location_slug}/plans:
    get:
      summary: List plans by location
      description: Retrieve all available plans for a specific location in your desired currency
      operationId: listPlansByLocation
      tags:
        - Resources
      parameters:
        - name: location_slug
          in: path
          required: true
          description: The slug of the location
          schema:
            type: string
          example: "MIA1"
      responses:
        '200':
          description: Plans by location retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/LocationWithPlans'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /locations/{location_slug}/images:
    get:
      summary: List images by location
      description: Retrieve all available images for a specific location
      operationId: listImagesByLocation
      tags:
        - Resources
      parameters:
        - name: location_slug
          in: path
          required: true
          description: The slug of the location
          schema:
            type: string
          example: "MIA2"
      responses:
        '200':
          description: Images by location retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ImageByLocation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

  /account:
    get:
      summary: Get account profile
      description: Retrieve your account information
      operationId: getAccountProfile
      tags:
        - Account
      responses:
        '200':
          description: Account information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Account'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

components:
  schemas:
    Snapshot:
      type: object
      properties:
        id:
          type: integer
          example: 123
        name:
          type: string
          example: "my-snapshot"
        slug:
          type: string
          example: "my-snapshot-slug"
        label:
          type: string
          example: "My Snapshot"
        description:
          type: string
          nullable: true
          example: "Backup snapshot"
        status:
          type: string
          enum:
            - creating
            - available
            - error
            - deleting
          example: "available"
        size:
          type: integer
          example: 25
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    SSHKey:
      type: object
      properties:
        id:
          type: integer
          example: 123
        title:
          type: string
          example: "My Laptop Key"
        key:
          type: string
          example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
        fingerprint:
          type: string
          example: "a1:b2:c3:d4:e5:f6:g7:h8:i9:j0:k1:l2:m3:n4:o5"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    SSHKeyResponse:
      type: object
      properties:
        title:
          type: string
          example: "My Project 1"
        slug:
          type: string
          example: "my-project-1"
        public_key:
          type: string
          example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDR1FmANsdfdsMmMSKMSDMKDMSKDMSIODM=="

    Plan:
      type: object
      properties:
        slug:
          type: string
          example: "basic-1gb"
        name:
          type: string
          example: "Basic 1GB"
        price:
          type: number
          example: 5.00
        currency:
          type: string
          example: "USD"
        specs:
          type: object
          properties:
            cpu:
              type: integer
              example: 1
            ram:
              type: integer
              example: 1024
            disk:
              type: integer
              example: 25

    Image:
      type: object
      properties:
        slug:
          type: string
          example: "ubuntu-22-04"
        name:
          type: string
          example: "Ubuntu 22.04 LTS"
        distribution:
          type: string
          example: "Ubuntu"
        version:
          type: string
          example: "22.04"
        architecture:
          type: string
          example: "x86_64"

    Location:
      type: object
      properties:
        slug:
          type: string
          example: "nyc1"
        name:
          type: string
          example: "New York 1"
        country:
          type: string
          example: "United States"
        city:
          type: string
          example: "New York"

    LocationWithPlans:
      type: object
      properties:
        country:
          type: string
          example: "United States"
        city:
          type: string
          example: "Miami"
        slug:
          type: string
          example: "MIA1"
        plans:
          type: array
          items:
            $ref: '#/components/schemas/PlanByLocation'

    PlanByLocation:
      type: object
      properties:
        currencycode:
          type: string
          example: "USD"
        shortcode:
          type: string
          example: "$"
        slug:
          type: string
          example: "1vcpu-1gb-10ssd"
        core:
          type: integer
          example: 1
        memory:
          type: integer
          example: 1024
        disk:
          type: integer
          example: 10
        bandwidth:
          type: integer
          example: 1000
        monthly_value:
          type: string
          example: "5.00"

    ImageByLocation:
      type: object
      properties:
        distro:
          type: string
          example: "CentOS 6.9 x64"
        os:
          type: string
          example: "linux"
        slug:
          type: string
          example: "centos-69-x64"

    Account:
      type: object
      properties:
        name:
          type: string
          example: "John Doe"
        company_name:
          type: string
          nullable: true
          example: "Acme Corp"
        email:
          type: string
          example: "user@example.com"
        currency:
          type: string
          example: "R$"
        balance:
          type: string
          example: "8846.91"

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Server not found"

  responses:
    BadRequest:
      description: Bad request - invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Invalid parameters provided"

    Unauthorized:
      description: Unauthorized - invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Invalid API key"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Internal server error"

    ServiceUnavailable:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            success: false
            message: "Service temporarily unavailable"

tags:
  - name: Instances
    description: Instance management operations
  - name: Snapshots
    description: Snapshot management operations
  - name: SSH Keys
    description: SSH key management operations
  - name: Resources
    description: Resource discovery operations
  - name: Account
    description: Account information operations
