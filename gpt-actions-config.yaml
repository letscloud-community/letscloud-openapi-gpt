# GPT Actions Configuration for LetsCloud API via Proxy
# This file provides examples and templates for integrating LetsCloud API with GPT Actions through the proxy

# Basic Configuration
name: "LetsCloud API Integration"
description: "Manage cloud infrastructure on LetsCloud platform through GPT Actions via proxy"
version: "1.0.0"

# Authentication Configuration (via Proxy)
auth:
  type: "user_id"
  header_name: "userId"
  header_value_format: "{user_id}"
  setup_endpoint: "/set-apikey"
  setup_instructions: "Users must first configure their API key via /set-apikey endpoint"

# API Base URLs (via Proxy)
servers:
  - url: "https://action.letscloud.io"
    description: "LetsCloud API Proxy Server"


# Available Actions Configuration
actions:


  # Instance Management Actions
  - name: "list_instances"
    description: "List all your instances"
    operation_id: "listInstances"
    category: "Instance Management"
    
  - name: "get_instance_details"
    description: "Get detailed information about a specific instance"
    operation_id: "getInstanceDetails"
    category: "Instance Management"
    required_params:
      - "identifier"
    
  - name: "create_instance"
    description: "Create a new instance with specified configuration"
    operation_id: "createInstance"
    category: "Instance Management"
    required_params:
      - "location_slug"
      - "plan_slug"
      - "hostname"
      - "label"
      - "image_slug"
      - "password"
    
  - name: "delete_instance"
    description: "Delete an instance from your account"
    operation_id: "deleteInstance"
    category: "Instance Management"
    required_params:
      - "identifier"
    
  - name: "power_on_instance"
    description: "Turn on a specific instance"
    operation_id: "powerOnInstance"
    category: "Instance Management"
    required_params:
      - "identifier"
    
  - name: "power_off_instance"
    description: "Turn off a specific instance"
    operation_id: "powerOffInstance"
    category: "Instance Management"
    required_params:
      - "identifier"
    
  - name: "reboot_instance"
    description: "Reboot a specific instance"
    operation_id: "rebootInstance"
    category: "Instance Management"
    required_params:
      - "identifier"
    
  - name: "reset_instance_password"
    description: "Change the root password of a specific instance"
    operation_id: "resetInstancePassword"
    category: "Instance Management"
    required_params:
      - "identifier"
      - "password"
    
  - name: "shutdown_instance"
    description: "Shutdown a running instance"
    operation_id: "shutdownInstance"
    category: "Instance Management"
    required_params:
      - "identifier"
    
  - name: "change_instance_plan"
    description: "Change the plan of an existing instance"
    operation_id: "changeInstancePlan"
    category: "Instance Management"
    required_params:
      - "identifier"
      - "plan_slug"

  # SSH Key Management Actions
  - name: "store_or_generate_ssh_key"
    description: "Store your current SSH key or generate a new one"
    operation_id: "storeOrGenerateSSHKey"
    category: "SSH Key Management"
    required_params:
      - "title"
    
  - name: "delete_ssh_key_by_slug"
    description: "Delete an SSH key from your account using its slug"
    operation_id: "deleteSSHKeyBySlug"
    category: "SSH Key Management"
    required_params:
      - "slug"

  # Snapshot Management Actions
  - name: "get_snapshot_status"
    description: "Get the current build status of a snapshot"
    operation_id: "getSnapshotStatus"
    category: "Snapshot Management"
    required_params:
      - "image_slug"
    
  - name: "update_snapshot_label"
    description: "Update the label of an existing snapshot"
    operation_id: "updateSnapshotLabel"
    category: "Snapshot Management"
    required_params:
      - "image_slug"
      - "label"
    
  - name: "delete_snapshot_by_slug"
    description: "Delete a snapshot using its slug"
    operation_id: "deleteSnapshot"
    category: "Snapshot Management"
    required_params:
      - "image_slug"
    


  # Resource Discovery Actions
  - name: "list_plans"
    description: "List all available server plans"
    operation_id: "listPlans"
    category: "Resource Discovery"
    
  - name: "list_images"
    description: "List all available OS images"
    operation_id: "listImages"
    category: "Resource Discovery"
    
  - name: "list_locations"
    description: "List all available server locations"
    operation_id: "listLocations"
    category: "Resource Discovery"
    
  - name: "list_plans_by_location"
    description: "List all available plans for a specific location"
    operation_id: "listPlansByLocation"
    category: "Resource Discovery"
    required_params:
      - "location_slug"
    
  - name: "list_images_by_location"
    description: "List all available images for a specific location"
    operation_id: "listImagesByLocation"
    category: "Resource Discovery"
    required_params:
      - "location_slug"

  # Account Information Actions
  - name: "get_profile_info"
    description: "Get your LetsCould profile information"
    operation_id: "getProfileInfo"
    category: "Account Information"

# Parameter Templates
parameter_templates:
  server_creation:
    label: "My Web Server"
    plan_slug: "basic-1gb"
    image_slug: "ubuntu-22-04"
    location_slug: "nyc1"
    hostname: "webserver-01"
    password: "SecurePassword123!"
    ssh_keys: [1, 2, 3]
  
  ssh_key_creation:
    title: "My Laptop Key"
    key: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
  
  snapshot_creation:
    label: "Backup before update"
    description: "Snapshot created before applying system updates"

# Usage Examples
usage_examples:
  - scenario: "Create a new web server"
    actions:
      - "list_locations"
      - "list_plans_by_location"
      - "list_images_by_location"
      - "create_instance"
    description: "First discover available resources, then create an instance"
  
  - scenario: "Manage existing instances"
    actions:
      - "list_instances"
      - "get_instance_details"
      - "power_on_instance"
      - "power_off_instance"
      - "reboot_instance"
    description: "List, view details, and control power state of instances"
  
  - scenario: "Backup and restore a server"
    actions:
      - "list_snapshots"
      - "create_snapshot"
      - "restore_snapshot"
    description: "Create a backup snapshot and restore from it if needed"
  
  - scenario: "Manage SSH access"
    actions:
      - "list_ssh_keys"
      - "create_ssh_key"
      - "delete_ssh_key"
    description: "Manage SSH keys for secure server access"
  
  - scenario: "Instance maintenance"
    actions:
      - "list_instances"
      - "reset_instance_password"
      - "change_instance_plan"
      - "shutdown_instance"
    description: "Perform maintenance tasks on instances"

# Error Handling
error_handling:
  retry_config:
    max_retries: 3
    backoff_multiplier: 2
    initial_delay: 1
  
  common_errors:
    - code: "UNAUTHORIZED"
      description: "Invalid or missing API key"
      solution: "Check your API key configuration"
    
    - code: "NOT_FOUND"
      description: "Resource not found"
      solution: "Verify the resource ID exists"
    
    - code: "VALIDATION_ERROR"
      description: "Invalid request parameters"
      solution: "Check required parameters and data types"

# Setup Instructions (via Proxy)
setup_instructions:
  step1: "User types '/set-apikey MINHA_CHAVE' in GPT chat"
  step2: "GPT calls POST /set-apikey with userId and apiKey"
  step3: "Proxy stores the API key associated with the userId"
  step4: "GPT uses userId in all subsequent /proxy calls"
  step5: "Proxy automatically injects Authorization header before calling LetsCloud API"
  
  example_setup:
    user_input: "/set-apikey MINHA_CHAVE"
    gpt_action: "POST /set-apikey"
    request_body: '{"userId": "user-123", "apiKey": "MINHA_CHAVE"}'
    response: '{"success": true, "message": "API Key configured successfully for user", "userId": "user-123"}'
    
  example_usage:
    user_input: "criar servidor Ubuntu"
    gpt_action: "POST /proxy"
    request_body: |
      {
        "userId": "user-123",
        "path": "/v2/instances",
        "method": "POST",
        "body": {
          "location_slug": "us-east",
          "plan_slug": "small",
          "hostname": "meu-server",
          "label": "Servidor GPT",
          "image_slug": "ubuntu-22.04",
          "password": "senhaSegura123"
        }
      }
    proxy_behavior: "Proxy injects 'Authorization: Bearer MINHA_CHAVE' and forwards to LetsCloud API"
    result: "Direct response from LetsCloud API returned to GPT"

# Security Considerations (via Proxy)
security:
  - "API keys are stored securely on the proxy server, not exposed to clients"
  - "Users only need to provide their API key once during setup"
  - "All subsequent requests use userId instead of direct API key"
  - "Proxy handles authentication transparently"
  - "Use HTTPS for all communications with the proxy"

# Best Practices
best_practices:
  - "Always validate server IDs before performing operations"
  - "Use descriptive labels for servers and snapshots"
  - "Implement proper backup strategies using snapshots"
  - "Monitor server status before performing state-changing operations"
  - "Keep SSH keys organized with meaningful titles"
  - "Store userId securely after initial setup"
  - "Use the proxy's /apikey-status endpoint to verify configuration"

# GPT Actions Usage Examples
gpt_usage_examples:
  
  # Example 1: Initial Setup
  setup_example:
    user_message: "/set-apikey sk_live_abc123xyz789"
    gpt_action:
      endpoint: "POST /set-apikey"
      body:
        userId: "user-123"
        apiKey: "sk_live_abc123xyz789"
    expected_response:
      success: true
      message: "API Key configured successfully for user"
      userId: "user-123"
  
  # Example 2: List Instances
  list_instances:
    user_message: "mostre meus servidores"
    gpt_action:
      endpoint: "POST /proxy"
      body:
        userId: "user-123"
        path: "/v2/instances"
        method: "GET"
    proxy_behavior: "Adds 'Authorization: Bearer sk_live_abc123xyz789' header"
    letscloud_call: "GET https://api.letscloud.io/v2/instances"
  
  # Example 3: Create Instance
  create_instance:
    user_message: "criar um servidor Ubuntu 22.04 com 2GB RAM"
    gpt_action:
      endpoint: "POST /proxy"
      body:
        userId: "user-123"
        path: "/v2/instances"
        method: "POST"
        body:
          location_slug: "us-east"
          plan_slug: "2vcpu-4gb-30ssd"
          hostname: "ubuntu-server"
          label: "Servidor Ubuntu GPT"
          image_slug: "ubuntu-22.04"
          password: "SecurePass123!"
    proxy_behavior: "Adds 'Authorization: Bearer sk_live_abc123xyz789' header"
    letscloud_call: "POST https://api.letscloud.io/v2/instances"
  
  # Example 4: Power Operations
  power_on:
    user_message: "ligar o servidor ubuntu-server"
    gpt_action:
      endpoint: "POST /proxy"
      body:
        userId: "user-123"
        path: "/v2/instances/ubuntu-server/power-on"
        method: "POST"
    proxy_behavior: "Adds 'Authorization: Bearer sk_live_abc123xyz789' header"
    letscloud_call: "POST https://api.letscloud.io/v2/instances/ubuntu-server/power-on"
  
  # Example 5: List Plans
  list_plans:
    user_message: "quais planos estão disponíveis?"
    gpt_action:
      endpoint: "POST /proxy"
      body:
        userId: "user-123"
        path: "/v2/plans"
        method: "GET"
    proxy_behavior: "Adds 'Authorization: Bearer sk_live_abc123xyz789' header"
    letscloud_call: "GET https://api.letscloud.io/v2/plans"
