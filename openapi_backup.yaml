openapi: 3.1.0
info:
  title: LetsCloud API
  description: |
    A comprehensive API for managing cloud infrastructure on LetsCloud platform.
    This API provides endpoints for server management, SSH key management, snapshots, and account operations.
    
    ## Features
    - **Server Management**: Create, delete, start, stop, reboot servers
    - **SSH Key Management**: Add, list, delete SSH keys
    - **Snapshot Management**: Create, restore, delete server snapshots
    - **Account Information**: Get account details and billing information
    - **Resource Discovery**: List available plans, images, and locations
    
    ## Authentication
    All API requests require authentication using your LetsCloud API key.
    You can provide the API key in the `Authorization` header or set the `LETSCLOUD_API_KEY` environment variable.
    
    ## Rate Limiting
    API requests are rate limited to ensure fair usage. Please implement appropriate retry logic with exponential backoff.
    
    ## Error Handling
    The API returns standard HTTP status codes and detailed error messages in JSON format.
  version: 1.2.0
  contact:
    name: LetsCloud Support
    url: https://www.letscloud.io
    email: support@letscloud.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://core.letscloud.io
    description: Production API server

security:
  - ApiKeyAuth: []

paths:
  /api/servers:
    get:
      summary: List all servers
      description: Retrieve a list of all servers in your account with pagination support
      operationId: listServers
      tags:
        - Servers
      parameters:
        - name: page
          in: query
          description: Page number for pagination (default: 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of servers per page (default: 5, max: 20)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 5
          example: 5
        - name: status
          in: query
          description: Filter servers by status (running, stopped, etc.)
          required: false
          schema:
            type: string
            enum:
              - running
              - stopped
              - starting
              - stopping
              - rebooting
              - error
          example: "running"
      responses:
        '200':
          description: List of servers retrieved successfully (limited to 20 servers per page)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    type: object
                    properties:
                      servers:
                        type: array
                        maxItems: 20
                        items:
                          $ref: '#/components/schemas/Server'
                      total:
                        type: integer
                        description: Total number of servers
                      page:
                        type: integer
                        description: Current page number
                      per_page:
                        type: integer
                        description: Number of servers per page
                      has_more:
                        type: boolean
                        description: Whether there are more servers available
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create a new server
      description: Create a new server instance with the specified configuration
      operationId: createServer
      tags:
        - Servers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - label
                - plan_slug
                - image_slug
                - location_slug
              properties:
                label:
                  type: string
                  description: A descriptive label for the server
                  example: "My Web Server"
                plan_slug:
                  type: string
                  description: The plan slug (e.g., 'basic-1gb', 'standard-2gb')
                  example: "basic-1gb"
                image_slug:
                  type: string
                  description: The OS image slug (e.g., 'ubuntu-22-04', 'centos-8')
                  example: "ubuntu-22-04"
                location_slug:
                  type: string
                  description: The location slug (e.g., 'nyc1', 'fra1', 'sfo2')
                  example: "nyc1"
                hostname:
                  type: string
                  description: Custom hostname for the server (optional)
                  example: "webserver-01"
                password:
                  type: string
                  description: Root password for the server (optional, will be auto-generated if not provided)
                  example: "SecurePassword123!"
                ssh_keys:
                  type: array
                  items:
                    type: integer
                  description: Array of SSH key IDs to add to the server
                  example: [1, 2, 3]
      responses:
        '201':
          description: Server created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/servers/{server_id}:
    get:
      summary: Get server details
      description: Retrieve detailed information about a specific server
      operationId: getServer
      tags:
        - Servers
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to retrieve
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: Server details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete a server
      description: Permanently delete a server (cannot be undone)
      operationId: deleteServer
      tags:
        - Servers
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to delete
          schema:
            type: integer
          example: 123
      responses:
        '204':
          description: Server deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/servers/{server_id}/start:
    post:
      summary: Start a server
      description: Start a server that is currently stopped
      operationId: startServer
      tags:
        - Servers
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to start
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: Server started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Server is already running
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/servers/{server_id}/stop:
    post:
      summary: Shutdown a server
      description: Shutdown a server that is currently running
      operationId: shutdownServer
      tags:
        - Servers
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to shutdown
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: Server shutdown successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Server is already stopped
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/servers/{server_id}/reboot:
    post:
      summary: Reboot a server
      description: Reboot a server that is currently running
      operationId: rebootServer
      tags:
        - Servers
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to reboot
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: Server rebooted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Server is not running
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/ssh-keys:
    get:
      summary: List all SSH keys
      description: Retrieve a list of all SSH keys in your account with pagination support
      operationId: listSSHKeys
      tags:
        - SSH Keys
      parameters:
        - name: page
          in: query
          description: Page number for pagination (default: 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          example: 1
        - name: per_page
          in: query
          description: Number of SSH keys per page (default: 20, max: 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20
      responses:
        '200':
          description: List of SSH keys retrieved successfully (limited to 100 keys per page)
          content:
            application/json:
              schema:
                type: object
                properties:
                  ssh_keys:
                    type: array
                    maxItems: 100
                    items:
                      $ref: '#/components/schemas/SSHKey'
                  total:
                    type: integer
                    description: Total number of SSH keys
                  page:
                    type: integer
                    description: Current page number
                  per_page:
                    type: integer
                    description: Number of SSH keys per page
                  has_more:
                    type: boolean
                    description: Whether there are more SSH keys available
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create a new SSH key
      description: Add a new SSH key to your account
      operationId: createSSHKey
      tags:
        - SSH Keys
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - key
              properties:
                title:
                  type: string
                  description: A name for the SSH key
                  example: "My Laptop Key"
                key:
                  type: string
                  description: The public key content (ssh-rsa, ssh-ed25519, etc.)
                  example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
      responses:
        '201':
          description: SSH key created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSHKey'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/ssh-keys/{key_id}:
    get:
      summary: Get SSH key details
      description: Retrieve detailed information about a specific SSH key
      operationId: getSSHKey
      tags:
        - SSH Keys
      parameters:
        - name: key_id
          in: path
          required: true
          description: The ID of the SSH key to retrieve
          schema:
            type: integer
          example: 1
      responses:
        '200':
          description: SSH key details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SSHKey'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete an SSH key
      description: Delete an SSH key from your account
      operationId: deleteSSHKey
      tags:
        - SSH Keys
      parameters:
        - name: key_id
          in: path
          required: true
          description: The ID of the SSH key to delete
          schema:
            type: integer
          example: 1
      responses:
        '204':
          description: SSH key deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/servers/{server_id}/snapshots:
    get:
      summary: List server snapshots
      description: Retrieve a list of all snapshots for a specific server
      operationId: listSnapshots
      tags:
        - Snapshots
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to list snapshots for
          schema:
            type: integer
          example: 123
      responses:
        '200':
          description: List of snapshots retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  snapshots:
                    type: array
                    items:
                      $ref: '#/components/schemas/Snapshot'
                  total:
                    type: integer
                    description: Total number of snapshots
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      summary: Create a server snapshot
      description: Create a snapshot of a server
      operationId: createSnapshot
      tags:
        - Snapshots
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to snapshot
          schema:
            type: integer
          example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - label
              properties:
                label:
                  type: string
                  description: A label for the snapshot
                  example: "Backup before update"
                description:
                  type: string
                  description: A description for the snapshot
                  example: "Snapshot created before applying system updates"
      responses:
        '201':
          description: Snapshot created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/servers/{server_id}/snapshots/{snapshot_id}:
    get:
      summary: Get snapshot details
      description: Retrieve detailed information about a specific snapshot
      operationId: getSnapshot
      tags:
        - Snapshots
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server
          schema:
            type: integer
          example: 123
        - name: snapshot_id
          in: path
          required: true
          description: The ID of the snapshot to retrieve
          schema:
            type: integer
          example: 456
      responses:
        '200':
          description: Snapshot details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Snapshot'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      summary: Delete a snapshot
      description: Delete a snapshot permanently
      operationId: deleteSnapshot
      tags:
        - Snapshots
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server
          schema:
            type: integer
          example: 123
        - name: snapshot_id
          in: path
          required: true
          description: The ID of the snapshot to delete
          schema:
            type: integer
          example: 456
      responses:
        '204':
          description: Snapshot deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/servers/{server_id}/snapshots/{snapshot_id}/restore:
    post:
      summary: Restore server from snapshot
      description: Restore a server from a snapshot
      operationId: restoreSnapshot
      tags:
        - Snapshots
      parameters:
        - name: server_id
          in: path
          required: true
          description: The ID of the server to restore
          schema:
            type: integer
          example: 123
        - name: snapshot_id
          in: path
          required: true
          description: The ID of the snapshot to restore from
          schema:
            type: integer
          example: 456
      responses:
        '200':
          description: Server restored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Server'
        '404':
          $ref: '#/components/responses/NotFound'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          description: Server is currently running
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/plans:
    get:
      summary: List available plans
      description: Retrieve a list of all available server plans
      operationId: listPlans
      tags:
        - Resources
      responses:
        '200':
          description: List of plans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  plans:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plan'
                  total:
                    type: integer
                    description: Total number of plans
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/images:
    get:
      summary: List available images
      description: Retrieve a list of all available OS images
      operationId: listImages
      tags:
        - Resources
      responses:
        '200':
          description: List of images retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
                  total:
                    type: integer
                    description: Total number of images
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/locations:
    get:
      summary: List available locations
      description: Retrieve a list of all available server locations
      operationId: listLocations
      tags:
        - Resources
      responses:
        '200':
          description: List of locations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Location'
                  total:
                    type: integer
                    description: Total number of locations
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/account:
    get:
      summary: Get account information
      description: Retrieve your LetsCloud account information (profile)
      operationId: getAccountInfo
      tags:
        - Account
      responses:
        '200':
          description: Account information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Whether the request was successful
                    example: true
                  data:
                    $ref: '#/components/schemas/Account'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: api-token
      description: |
        Your LetsCloud API token. You can also set the `LETSCLOUD_API_TOKEN` environment variable.
        Format: `your-token-here`

  schemas:
    Server:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the server
          example: 123
        label:
          type: string
          description: User-defined label for the server
          example: "My Web Server"
        hostname:
          type: string
          description: Server hostname
          example: "webserver-01"
        status:
          type: string
          enum:
            - running
            - stopped
            - starting
            - stopping
            - rebooting
            - error
          description: Current status of the server
          example: "running"
        ip_address:
          type: string
          description: Public IP address of the server
          example: "192.168.1.100"
        plan_slug:
          type: string
          description: Plan identifier
          example: "basic-1gb"
        image_slug:
          type: string
          description: Image identifier
          example: "ubuntu-22-04"
        location_slug:
          type: string
          description: Location identifier
          example: "nyc1"
        created_at:
          type: string
          format: date-time
          description: Server creation timestamp
          example: "2024-01-15T10:30:00Z"

    Plan:
      type: object
      properties:
        slug:
          type: string
          description: Unique identifier for the plan
          example: "basic-1gb"
        name:
          type: string
          description: Human-readable name for the plan
          example: "Basic 1GB"
        ram:
          type: integer
          description: RAM in MB
          example: 1024
        cpu:
          type: integer
          description: Number of CPU cores
          example: 1
        disk:
          type: integer
          description: Disk size in GB
          example: 25
        price:
          type: number
          description: Monthly price in USD
          example: 5.00
        available:
          type: boolean
          description: Whether the plan is available for new servers
          example: true

    Image:
      type: object
      properties:
        slug:
          type: string
          description: Unique identifier for the image
          example: "ubuntu-22-04"
        name:
          type: string
          description: Human-readable name for the image
          example: "Ubuntu 22.04 LTS"
        distribution:
          type: string
          description: Operating system distribution
          example: "Ubuntu"
        version:
          type: string
          description: Version of the operating system
          example: "22.04"
        architecture:
          type: string
          enum:
            - x86_64
            - arm64
          description: CPU architecture
          example: "x86_64"
        available:
          type: boolean
          description: Whether the image is available for new servers
          example: true

    Location:
      type: object
      properties:
        slug:
          type: string
          description: Unique identifier for the location
          example: "nyc1"
        name:
          type: string
          description: Human-readable name for the location
          example: "New York"
        country:
          type: string
          description: Country where the location is situated
          example: "United States"
        region:
          type: string
          description: Region or state
          example: "New York"
        available:
          type: boolean
          description: Whether the location is available for new servers
          example: true

    SSHKey:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the SSH key
          example: 1
        title:
          type: string
          description: User-defined name for the SSH key
          example: "My Laptop Key"
        fingerprint:
          type: string
          description: SSH key fingerprint
          example: "SHA256:abc123..."
        public_key:
          type: string
          description: Public key content
          example: "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC..."
        created_at:
          type: string
          format: date-time
          description: SSH key creation timestamp
          example: "2024-01-15T10:30:00Z"

    Snapshot:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the snapshot
          example: 456
        label:
          type: string
          description: User-defined label for the snapshot
          example: "Backup before update"
        description:
          type: string
          description: User-defined description for the snapshot
          example: "Snapshot created before applying system updates"
        size:
          type: integer
          description: Size of the snapshot in GB
          example: 25
        status:
          type: string
          enum:
            - creating
            - available
            - error
            - deleting
          description: Current status of the snapshot
          example: "available"
        server_id:
          type: integer
          description: ID of the server this snapshot belongs to
          example: 123
        created_at:
          type: string
          format: date-time
          description: Snapshot creation timestamp
          example: "2024-01-15T10:30:00Z"

    Account:
      type: object
      properties:
        name:
          type: string
          description: The First and Last name
          example: "John Smith"
        company_name:
          type: string
          description: The company name of this profile
          example: "LetsCloud Company"
        email:
          type: string
          description: The email of the user registered in LetsCloud
          example: "john.smith@letscloud.io"
        currency:
          type: string
          description: Your currency shortcode
          example: "$"
        balance:
          type: string
          description: Your current balance
          example: "100.00"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Server not found"
        code:
          type: string
          description: Error code
          example: "NOT_FOUND"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  responses:
    BadRequest:
      description: Bad request - invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid parameters provided"
            code: "BAD_REQUEST"
            details:
              field: "plan_slug"
              message: "Plan not found"

    Unauthorized:
      description: Unauthorized - invalid or missing API key
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Invalid API key"
            code: "UNAUTHORIZED"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Server not found"
            code: "NOT_FOUND"

    ValidationError:
      description: Validation error - invalid request data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Validation failed"
            code: "VALIDATION_ERROR"
            details:
              field: "label"
              message: "Label is required"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "Internal server error"
            code: "INTERNAL_ERROR"

tags:
  - name: Servers
    description: Server management operations
  - name: SSH Keys
    description: SSH key management operations
  - name: Snapshots
    description: Server snapshot operations
  - name: Resources
    description: Resource discovery operations
  - name: Account
    description: Account information operations
